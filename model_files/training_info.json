{
    "time": "24/10/2024 21:53:42",
    "trained_model": "['GLM', 'RF', 'XGB', 'LGBM']",
    "best_each": "[{'model': \"Pipeline(steps=[('preprocessor',\\n                 ColumnTransformer(transformers=[('num',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='median')),\\n                                                                  ('scaler',\\n                                                                   StandardScaler())]),\\n                                                  Index(['age', 'marital_status', 'education_level', 'num_of_children',\\n       'smoking_status', 'physical_activity_level', 'income',\\n       'alcohol_consumption', 'dietary_habits', 'sleeping_patterns'],\\n      dtype='object')),\\n                                                 ('cat',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='most_frequent')),\\n                                                                  ('onehot',\\n                                                                   OneHotEncoder(handle_unknown='ignore'))]),\\n                                                  Index(['history_of_substance_abuse', 'family_history_of_depression',\\n       'chronic_medical_conditions'],\\n      dtype='object'))])),\\n                ('classifier', LogisticRegression(C=0.1, max_iter=1000))])\", 'train_acc': 0.6977958236658933, 'valid_acc': 0.6950889404485692, 'precision': array([0.69508894, 0.        ]), 'recall': array([1., 0.]), 'fscore': array([0.82012091, 0.        ])}, {'model': \"Pipeline(steps=[('preprocessor',\\n                 ColumnTransformer(transformers=[('num',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='median')),\\n                                                                  ('scaler',\\n                                                                   StandardScaler())]),\\n                                                  Index(['age', 'marital_status', 'education_level', 'num_of_children',\\n       'smoking_status', 'physical_activity_level', 'income',\\n       'alcohol_consumption', 'dietary_habits', 'sleeping_patterns'],\\n      dtype='object')),\\n                                                 ('cat',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='most_frequent')),\\n                                                                  ('onehot',\\n                                                                   OneHotEncoder(handle_unknown='ignore'))]),\\n                                                  Index(['history_of_substance_abuse', 'family_history_of_depression',\\n       'chronic_medical_conditions'],\\n      dtype='object'))])),\\n                ('classifier', RandomForestClassifier(max_depth=10))])\", 'train_acc': 0.7288605310647074, 'valid_acc': 0.6929621036349575, 'precision': array([0.69519549, 0.32258065]), 'recall': array([0.99415855, 0.00634115]), 'fscore': array([0.81822344, 0.01243781])}, {'model': \"Pipeline(steps=[('preprocessor',\\n                 ColumnTransformer(transformers=[('num',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='median')),\\n                                                                  ('scaler',\\n                                                                   StandardScaler())]),\\n                                                  Index(['age', 'marital_status', 'education_level', 'num_of_children',\\n       'smoking_status', 'physical_activity_level', 'income',\\n       'alcohol_consumption', 'dietary_habits', 'sleeping_patterns'],\\n      dtype='obj...\\n                               feature_types=None, gamma=None, grow_policy=None,\\n                               importance_type=None,\\n                               interaction_constraints=None, learning_rate=0.01,\\n                               max_bin=None, max_cat_threshold=None,\\n                               max_cat_to_onehot=None, max_delta_step=None,\\n                               max_depth=10, max_leaves=None,\\n                               min_child_weight=None, missing=nan,\\n                               monotone_constraints=None, multi_strategy=None,\\n                               n_estimators=100, n_jobs=None,\\n                               num_parallel_tree=None, random_state=None, ...))])\", 'train_acc': 0.7110079917504512, 'valid_acc': 0.6945088940448569, 'precision': array([0.69612614, 0.45714286]), 'recall': array([0.99471488, 0.01014585]), 'fscore': array([0.81905634, 0.01985112])}, {'model': \"Pipeline(steps=[('preprocessor',\\n                 ColumnTransformer(transformers=[('num',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='median')),\\n                                                                  ('scaler',\\n                                                                   StandardScaler())]),\\n                                                  Index(['age', 'marital_status', 'education_level', 'num_of_children',\\n       'smoking_status', 'physical_activity_level', 'income',\\n       'alcohol_consumption', 'dietary_habits', 'sleeping_patterns'],\\n      dtype='object')),\\n                                                 ('cat',\\n                                                  Pipeline(steps=[('imputer',\\n                                                                   SimpleImputer(strategy='most_frequent')),\\n                                                                  ('onehot',\\n                                                                   OneHotEncoder(handle_unknown='ignore'))]),\\n                                                  Index(['history_of_substance_abuse', 'family_history_of_depression',\\n       'chronic_medical_conditions'],\\n      dtype='object'))])),\\n                ('classifier',\\n                 LGBMClassifier(learning_rate=0.01, max_depth=20,\\n                                n_estimators=50, num_leaves=20))])\", 'train_acc': 0.6977958236658933, 'valid_acc': 0.6950889404485692, 'precision': array([0.69508894, 0.        ]), 'recall': array([1., 0.]), 'fscore': array([0.82012091, 0.        ])}]",
    "best_model": "Pipeline(steps=[('preprocessor',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('imputer',\n                                                                   SimpleImputer(strategy='median')),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  Index(['age', 'marital_status', 'education_level', 'num_of_children',\n       'smoking_status', 'physical_activity_level', 'income',\n       'alcohol_consumption', 'dietary_habits', 'sleeping_patterns'],\n      dtype='object')),\n                                                 ('cat',\n                                                  Pipeline(steps=[('imputer',\n                                                                   SimpleImputer(strategy='most_frequent')),\n                                                                  ('onehot',\n                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n                                                  Index(['history_of_substance_abuse', 'family_history_of_depression',\n       'chronic_medical_conditions'],\n      dtype='object'))])),\n                ('classifier', LogisticRegression(C=0.1, max_iter=1000))])",
    "best_acc": "0.6950889404485692"
}